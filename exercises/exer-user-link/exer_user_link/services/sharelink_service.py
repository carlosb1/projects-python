"""Service to generate shared links."""
import logging
from typing import Union
from pathlib import Path

from exer_user_link.utils import find_in_file_info_by_name_id
from exer_user_link.adapters.repositories import UserRepository
from exer_user_link.adapters.repositories import SharedLinkRepository
from exer_user_link.domains import SharedLink

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)


class ShareLinkService:
    """Shared link service to create shared links."""

    def __init__(self, user_repository: UserRepository,
                 shared_link_repository: SharedLinkRepository):
        self._shared_link_repository = shared_link_repository
        self._user_repository = user_repository

    def generate_link(self, user_id: str, fil: str) -> Union[None, str]:
        """Generate link from a filepath."""
        logger.info(f'Generating link for {user_id} and fil {fil}')
        user = self._user_repository.find_by_userid(user_id)
        if not user:
            return None

        # TODO verify size and check that it exists file
        index = find_in_file_info_by_name_id(user.files, fil)
        if index == -1:
            return None
        fil_info = user.files[index]
        shared_link = SharedLink(fil=fil_info.fil)
        self._shared_link_repository.save(shared_link)
        return shared_link.name_id

    # link real path with autogenerated
    def download_link(self, name_id: str) -> Union[None, Path]:
        """Get correct link to download."""
        logger.info(f'Downloading link for  {name_id}')
        shared_info = self._shared_link_repository.find_by_name_id(name_id)
        if shared_info:
            self._shared_link_repository.remove(shared_info)
            return shared_info.fil
        return None
